
AVRASM ver. 2.1.30  C:\Users\user\Desktop\AZ2-AshkanHashemi-9830113\Debug\List\AZ2.asm Thu Oct 13 20:06:57 2022

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 002f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x2001B:
00002a 063f
00002b 4f5b
00002c 6d66
00002d 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00002e 6f7f      	.DB  0x7F,0x6F
                 __RESET:
00002f 94f8      	CLI
000030 27ee      	CLR  R30
000031 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000032 e0f1      	LDI  R31,1
000033 bffb      	OUT  GICR,R31
000034 bfeb      	OUT  GICR,R30
000035 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000036 e08d      	LDI  R24,(14-2)+1
000037 e0a2      	LDI  R26,2
000038 27bb      	CLR  R27
                 __CLEAR_REG:
000039 93ed      	ST   X+,R30
00003a 958a      	DEC  R24
00003b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003d e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00003e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00003f 93ed      	ST   X+,R30
000040 9701      	SBIW R24,1
000041 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000042 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000043 bfed      	OUT  SPL,R30
000044 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000045 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000046 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000047 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000048 940c 004a 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*
                 ; * AZ2.c
                 ; *
                 ; * Created: 10/13/2022 2:40:23 PM
                 ; * Author: user
                 ; */
                 ;#include <header.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <port_fun_h.h>
                 ;
                 ;void main(void)
                 ; 0000 000B {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 000C     char data_out;
                 ; 0000 000D     data_out=Q3(4,500);
                 ;	data_out -> R17
00004a e0e4      	LDI  R30,LOW(4)
00004b e0f0      	LDI  R31,HIGH(4)
00004c 93fa      	ST   -Y,R31
00004d 93ea      	ST   -Y,R30
00004e efa4      	LDI  R26,LOW(500)
00004f e0b1      	LDI  R27,HIGH(500)
000050 d036      	RCALL _Q3
000051 2f1e      	MOV  R17,R30
                 ; 0000 000E     while(1) {
                 _0x3:
                 ; 0000 000F //        data_out=Q1(port_D,port_B);
                 ; 0000 0010 //        delay_ms(100);
                 ; 0000 0011 //        data_out=Q2(port_B,0x55);
                 ; 0000 0012 //        delay_ms(100);
                 ; 0000 0013 //        Q4();
                 ; 0000 0014 //        delay_ms(100);
                 ; 0000 0015         Q5(8976,port_C,port_D);
000052 e1e0      	LDI  R30,LOW(8976)
000053 e2f3      	LDI  R31,HIGH(8976)
000054 93fa      	ST   -Y,R31
000055 93ea      	ST   -Y,R30
000056 e0e3      	LDI  R30,LOW(3)
000057 93ea      	ST   -Y,R30
000058 e0a4      	LDI  R26,LOW(4)
000059 d04d      	RCALL _Q5
                 ; 0000 0016 
                 ; 0000 0017     }
00005a cff7      	RJMP _0x3
                 ; 0000 0018 }
                 _0x6:
00005b cfff      	RJMP _0x6
                 ; .FEND
                 ;
                 ;#include <header.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;/**********************************/
                 ;unsigned int Q1(unsigned int port_in,unsigned int port_out)
                 ; 0001 0004 {
                 
                 	.CSEG
                 ; 0001 0005 char data_in;
                 ; 0001 0006 switch( port_in)
                 ;	port_in -> Y+3
                 ;	port_out -> Y+1
                 ;	data_in -> R17
                 ; 0001 0007 {
                 ; 0001 0008     case port_A:
                 ; 0001 0009         DDRA=0x00; // as input
                 ; 0001 000A         data_in=PINA;
                 ; 0001 000B     break ;
                 ; 0001 000C     case port_B:
                 ; 0001 000D         DDRB=0x00; // as input
                 ; 0001 000E         data_in=PINB;
                 ; 0001 000F     break;
                 ; 0001 0010     case port_C:
                 ; 0001 0011         DDRC=0x00; // as input
                 ; 0001 0012         data_in=PINC;
                 ; 0001 0013     break;
                 ; 0001 0014     case port_D:
                 ; 0001 0015         DDRD=0x00; // as input
                 ; 0001 0016         data_in=PIND;
                 ; 0001 0017     break;
                 ; 0001 0018 }
                 ; 0001 0019 switch( port_out)
                 ; 0001 001A {
                 ; 0001 001B     case port_A:
                 ; 0001 001C         DDRA=0xFF; // as output
                 ; 0001 001D         PORTA=data_in;
                 ; 0001 001E     break ;
                 ; 0001 001F     case port_B:
                 ; 0001 0020         DDRB=0xFF; // as output
                 ; 0001 0021         PORTB=data_in;
                 ; 0001 0022     break;
                 ; 0001 0023     case port_C:
                 ; 0001 0024         DDRC=0xFF; // as output
                 ; 0001 0025         PORTC=data_in;
                 ; 0001 0026     break;
                 ; 0001 0027     case port_D:
                 ; 0001 0028         DDRD=0xFF; // as output
                 ; 0001 0029         PORTD=data_in;
                 ; 0001 002A     break;
                 ; 0001 002B     }
                 ; 0001 002C return 1; // can be any data with unsigned int format
                 ; 0001 002D }
                 ;// ***********************************//
                 ;unsigned int Q2(unsigned int port_in,unsigned int data_in)
                 ; 0001 0030 {
                 _Q2:
                 ; .FSTART _Q2
                 ; 0001 0031 switch( port_in)
00005c 93ba      	ST   -Y,R27
00005d 93aa      	ST   -Y,R26
                 ;	port_in -> Y+2
                 ;	data_in -> Y+0
00005e 81ea      	LDD  R30,Y+2
00005f 81fb      	LDD  R31,Y+2+1
                 ; 0001 0032 {
                 ; 0001 0033     case port_A:
000060 30e1      	CPI  R30,LOW(0x1)
000061 e0a0      	LDI  R26,HIGH(0x1)
000062 07fa      	CPC  R31,R26
000063 f429      	BRNE _0x20014
                 ; 0001 0034         DDRA=0xff; // as input
000064 efef      	LDI  R30,LOW(255)
000065 bbea      	OUT  0x1A,R30
                 ; 0001 0035         PORTA=data_in;
000066 81e8      	LD   R30,Y
000067 bbeb      	OUT  0x1B,R30
                 ; 0001 0036     break ;
000068 c01a      	RJMP _0x20013
                 ; 0001 0037     case port_B:
                 _0x20014:
000069 30e2      	CPI  R30,LOW(0x2)
00006a e0a0      	LDI  R26,HIGH(0x2)
00006b 07fa      	CPC  R31,R26
00006c f429      	BRNE _0x20015
                 ; 0001 0038         DDRB=0xff; // as input
00006d efef      	LDI  R30,LOW(255)
00006e bbe7      	OUT  0x17,R30
                 ; 0001 0039         PORTB=data_in;
00006f 81e8      	LD   R30,Y
000070 bbe8      	OUT  0x18,R30
                 ; 0001 003A     break;
000071 c011      	RJMP _0x20013
                 ; 0001 003B     case port_C:
                 _0x20015:
000072 30e3      	CPI  R30,LOW(0x3)
000073 e0a0      	LDI  R26,HIGH(0x3)
000074 07fa      	CPC  R31,R26
000075 f429      	BRNE _0x20016
                 ; 0001 003C         DDRC=0xff; // as input
000076 efef      	LDI  R30,LOW(255)
000077 bbe4      	OUT  0x14,R30
                 ; 0001 003D         PORTC=data_in;
000078 81e8      	LD   R30,Y
000079 bbe5      	OUT  0x15,R30
                 ; 0001 003E     break;
00007a c008      	RJMP _0x20013
                 ; 0001 003F     case port_D:
                 _0x20016:
00007b 30e4      	CPI  R30,LOW(0x4)
00007c e0a0      	LDI  R26,HIGH(0x4)
00007d 07fa      	CPC  R31,R26
00007e f421      	BRNE _0x20013
                 ; 0001 0040         DDRD=0xff; // as input
00007f efef      	LDI  R30,LOW(255)
000080 bbe1      	OUT  0x11,R30
                 ; 0001 0041         PORTD=data_in;
000081 81e8      	LD   R30,Y
000082 bbe2      	OUT  0x12,R30
                 ; 0001 0042     break;
                 ; 0001 0043 }
                 _0x20013:
                 ; 0001 0044 return 1; // can be any data with unsigned int format
000083 e0e1      	LDI  R30,LOW(1)
000084 e0f0      	LDI  R31,HIGH(1)
000085 9624      	ADIW R28,4
000086 9508      	RET
                 ; 0001 0045 }
                 ; .FEND
                 ;//************************************//
                 ;unsigned int Q3(unsigned int n_on_off,unsigned int time_between_on_off)
                 ; 0001 0048 {
                 _Q3:
                 ; .FSTART _Q3
                 ; 0001 0049     int i;
                 ; 0001 004A     for(i=0;i<n_on_off;i++){
000087 93ba      	ST   -Y,R27
000088 93aa      	ST   -Y,R26
000089 931a      	ST   -Y,R17
00008a 930a      	ST   -Y,R16
                 ;	n_on_off -> Y+4
                 ;	time_between_on_off -> Y+2
                 ;	i -> R16,R17
                +
00008b e000     +LDI R16 , LOW ( 0 )
00008c e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20019:
00008d 81ec      	LDD  R30,Y+4
00008e 81fd      	LDD  R31,Y+4+1
00008f 170e      	CP   R16,R30
000090 071f      	CPC  R17,R31
000091 f478      	BRSH _0x2001A
                 ; 0001 004B         Q2(port_B,0xff);
000092 e0e2      	LDI  R30,LOW(2)
000093 e0f0      	LDI  R31,HIGH(2)
000094 93fa      	ST   -Y,R31
000095 93ea      	ST   -Y,R30
000096 efaf      	LDI  R26,LOW(255)
000097 d0c5      	RCALL SUBOPT_0x0
                 ; 0001 004C         delay_ms(time_between_on_off);
                 ; 0001 004D         Q2(port_B,0x00);
000098 e0e2      	LDI  R30,LOW(2)
000099 e0f0      	LDI  R31,HIGH(2)
00009a 93fa      	ST   -Y,R31
00009b 93ea      	ST   -Y,R30
00009c e0a0      	LDI  R26,LOW(0)
00009d d0bf      	RCALL SUBOPT_0x0
                 ; 0001 004E         delay_ms(time_between_on_off);
                 ; 0001 004F     }
                +
00009e 5f0f     +SUBI R16 , LOW ( - 1 )
00009f 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000a0 cfec      	RJMP _0x20019
                 _0x2001A:
                 ; 0001 0050 
                 ; 0001 0051 return 1; // can be any data with unsigned int format
0000a1 e0e1      	LDI  R30,LOW(1)
0000a2 e0f0      	LDI  R31,HIGH(1)
0000a3 8119      	LDD  R17,Y+1
0000a4 8108      	LDD  R16,Y+0
0000a5 9626      	ADIW R28,6
0000a6 9508      	RET
                 ; 0001 0052 }
                 ; .FEND
                 ;//*****************************************//
                 ;void Q4(void)
                 ; 0001 0055 {
                 ; 0001 0056     Q1(port_A,port_B);
                 ; 0001 0057 }
                 ;//*****************************************//
                 ;void Q5(unsigned int data_in,char PORT_out,char PORT_en)
                 ; 0001 005A {
                 _Q5:
                 ; .FSTART _Q5
                 ; 0001 005B     char numbers[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D,0x7D, 0x07, 0x7F, 0x6F};
                 ; 0001 005C     int i;
                 ; 0001 005D     for (i=0;i<10;i++) {
0000a7 93aa      	ST   -Y,R26
0000a8 972a      	SBIW R28,10
0000a9 e08a      	LDI  R24,10
0000aa e0a0      	LDI  R26,LOW(0)
0000ab e0b0      	LDI  R27,HIGH(0)
0000ac e5e4      	LDI  R30,LOW(_0x2001B*2)
0000ad e0f0      	LDI  R31,HIGH(_0x2001B*2)
0000ae 940e 01a3 	CALL __INITLOCB
0000b0 931a      	ST   -Y,R17
0000b1 930a      	ST   -Y,R16
                 ;	data_in -> Y+14
                 ;	PORT_out -> Y+13
                 ;	PORT_en -> Y+12
                 ;	numbers -> Y+2
                 ;	i -> R16,R17
                +
0000b2 e000     +LDI R16 , LOW ( 0 )
0000b3 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x2001D:
                +
0000b4 300a     +CPI R16 , LOW ( 10 )
0000b5 e0e0     +LDI R30 , HIGH ( 10 )
0000b6 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
0000b7 f00c      	BRLT PC+2
0000b8 c0a0      	RJMP _0x2001E
                 ; 0001 005E 
                 ; 0001 005F 
                 ; 0001 0060         switch(PORT_en)
0000b9 d0a9      	RCALL SUBOPT_0x1
                 ; 0001 0061         {
                 ; 0001 0062             case port_A:
0000ba f429      	BRNE _0x20022
                 ; 0001 0063                 DDRA=0x0f;
0000bb e0ef      	LDI  R30,LOW(15)
0000bc bbea      	OUT  0x1A,R30
                 ; 0001 0064                 PORTA=0x0E;
0000bd e0ee      	LDI  R30,LOW(14)
0000be bbeb      	OUT  0x1B,R30
                 ; 0001 0065             break ;
0000bf c01a      	RJMP _0x20021
                 ; 0001 0066             case port_B:
                 _0x20022:
0000c0 30e2      	CPI  R30,LOW(0x2)
0000c1 e0a0      	LDI  R26,HIGH(0x2)
0000c2 07fa      	CPC  R31,R26
0000c3 f429      	BRNE _0x20023
                 ; 0001 0067                 DDRB=0x0f;
0000c4 e0ef      	LDI  R30,LOW(15)
0000c5 bbe7      	OUT  0x17,R30
                 ; 0001 0068                 PORTB=0x0E;
0000c6 e0ee      	LDI  R30,LOW(14)
0000c7 bbe8      	OUT  0x18,R30
                 ; 0001 0069             break;
0000c8 c011      	RJMP _0x20021
                 ; 0001 006A             case port_C:
                 _0x20023:
0000c9 30e3      	CPI  R30,LOW(0x3)
0000ca e0a0      	LDI  R26,HIGH(0x3)
0000cb 07fa      	CPC  R31,R26
0000cc f429      	BRNE _0x20024
                 ; 0001 006B                 DDRC=0x0f;
0000cd e0ef      	LDI  R30,LOW(15)
0000ce bbe4      	OUT  0x14,R30
                 ; 0001 006C                 PORTC=0x0E;
0000cf e0ee      	LDI  R30,LOW(14)
0000d0 bbe5      	OUT  0x15,R30
                 ; 0001 006D             break;
0000d1 c008      	RJMP _0x20021
                 ; 0001 006E             case port_D:
                 _0x20024:
0000d2 30e4      	CPI  R30,LOW(0x4)
0000d3 e0a0      	LDI  R26,HIGH(0x4)
0000d4 07fa      	CPC  R31,R26
0000d5 f421      	BRNE _0x20021
                 ; 0001 006F                 DDRD=0x0f;
0000d6 e0ef      	LDI  R30,LOW(15)
0000d7 bbe1      	OUT  0x11,R30
                 ; 0001 0070                 PORTD=0x0E;
0000d8 e0ee      	LDI  R30,LOW(14)
0000d9 bbe2      	OUT  0x12,R30
                 ; 0001 0071             break;
                 ; 0001 0072         }
                 _0x20021:
                 ; 0001 0073         Q2(PORT_out,numbers[(data_in/1000)%10]);
0000da d08e      	RCALL SUBOPT_0x2
0000db eee8      	LDI  R30,LOW(1000)
0000dc e0f3      	LDI  R31,HIGH(1000)
0000dd d092      	RCALL SUBOPT_0x3
                 ; 0001 0074         delay_ms(5);
                 ; 0001 0075         switch(PORT_en)
                 ; 0001 0076         {
                 ; 0001 0077             case port_A:
0000de f429      	BRNE _0x20029
                 ; 0001 0078                 DDRA=0x0f;
0000df e0ef      	LDI  R30,LOW(15)
0000e0 bbea      	OUT  0x1A,R30
                 ; 0001 0079                 PORTA=0x0D;
0000e1 e0ed      	LDI  R30,LOW(13)
0000e2 bbeb      	OUT  0x1B,R30
                 ; 0001 007A             break ;
0000e3 c01a      	RJMP _0x20028
                 ; 0001 007B             case port_B:
                 _0x20029:
0000e4 30e2      	CPI  R30,LOW(0x2)
0000e5 e0a0      	LDI  R26,HIGH(0x2)
0000e6 07fa      	CPC  R31,R26
0000e7 f429      	BRNE _0x2002A
                 ; 0001 007C                 DDRB=0x0f;
0000e8 e0ef      	LDI  R30,LOW(15)
0000e9 bbe7      	OUT  0x17,R30
                 ; 0001 007D                 PORTB=0x0D;
0000ea e0ed      	LDI  R30,LOW(13)
0000eb bbe8      	OUT  0x18,R30
                 ; 0001 007E             break;
0000ec c011      	RJMP _0x20028
                 ; 0001 007F             case port_C:
                 _0x2002A:
0000ed 30e3      	CPI  R30,LOW(0x3)
0000ee e0a0      	LDI  R26,HIGH(0x3)
0000ef 07fa      	CPC  R31,R26
0000f0 f429      	BRNE _0x2002B
                 ; 0001 0080                 DDRC=0x0f;
0000f1 e0ef      	LDI  R30,LOW(15)
0000f2 bbe4      	OUT  0x14,R30
                 ; 0001 0081                 PORTC=0x0D;
0000f3 e0ed      	LDI  R30,LOW(13)
0000f4 bbe5      	OUT  0x15,R30
                 ; 0001 0082             break;
0000f5 c008      	RJMP _0x20028
                 ; 0001 0083             case port_D:
                 _0x2002B:
0000f6 30e4      	CPI  R30,LOW(0x4)
0000f7 e0a0      	LDI  R26,HIGH(0x4)
0000f8 07fa      	CPC  R31,R26
0000f9 f421      	BRNE _0x20028
                 ; 0001 0084                 DDRD=0x0f;
0000fa e0ef      	LDI  R30,LOW(15)
0000fb bbe1      	OUT  0x11,R30
                 ; 0001 0085                 PORTD=0x0D;
0000fc e0ed      	LDI  R30,LOW(13)
0000fd bbe2      	OUT  0x12,R30
                 ; 0001 0086             break;
                 ; 0001 0087         }
                 _0x20028:
                 ; 0001 0088         Q2(PORT_out,numbers[(data_in/100)%10]);
0000fe d06a      	RCALL SUBOPT_0x2
0000ff e6e4      	LDI  R30,LOW(100)
000100 e0f0      	LDI  R31,HIGH(100)
000101 d06e      	RCALL SUBOPT_0x3
                 ; 0001 0089         delay_ms(5);
                 ; 0001 008A 
                 ; 0001 008B         switch(PORT_en)
                 ; 0001 008C         {
                 ; 0001 008D             case port_A:
000102 f429      	BRNE _0x20030
                 ; 0001 008E                 DDRA=0x0f;
000103 e0ef      	LDI  R30,LOW(15)
000104 bbea      	OUT  0x1A,R30
                 ; 0001 008F                 PORTA=0x0B;
000105 e0eb      	LDI  R30,LOW(11)
000106 bbeb      	OUT  0x1B,R30
                 ; 0001 0090             break ;
000107 c01a      	RJMP _0x2002F
                 ; 0001 0091             case port_B:
                 _0x20030:
000108 30e2      	CPI  R30,LOW(0x2)
000109 e0a0      	LDI  R26,HIGH(0x2)
00010a 07fa      	CPC  R31,R26
00010b f429      	BRNE _0x20031
                 ; 0001 0092                 DDRB=0x0f;
00010c e0ef      	LDI  R30,LOW(15)
00010d bbe7      	OUT  0x17,R30
                 ; 0001 0093                 PORTB=0x0B;
00010e e0eb      	LDI  R30,LOW(11)
00010f bbe8      	OUT  0x18,R30
                 ; 0001 0094             break;
000110 c011      	RJMP _0x2002F
                 ; 0001 0095             case port_C:
                 _0x20031:
000111 30e3      	CPI  R30,LOW(0x3)
000112 e0a0      	LDI  R26,HIGH(0x3)
000113 07fa      	CPC  R31,R26
000114 f429      	BRNE _0x20032
                 ; 0001 0096                 DDRC=0x0f;
000115 e0ef      	LDI  R30,LOW(15)
000116 bbe4      	OUT  0x14,R30
                 ; 0001 0097                 PORTC=0x0B;
000117 e0eb      	LDI  R30,LOW(11)
000118 bbe5      	OUT  0x15,R30
                 ; 0001 0098             break;
000119 c008      	RJMP _0x2002F
                 ; 0001 0099             case port_D:
                 _0x20032:
00011a 30e4      	CPI  R30,LOW(0x4)
00011b e0a0      	LDI  R26,HIGH(0x4)
00011c 07fa      	CPC  R31,R26
00011d f421      	BRNE _0x2002F
                 ; 0001 009A                 DDRD=0x0f;
00011e e0ef      	LDI  R30,LOW(15)
00011f bbe1      	OUT  0x11,R30
                 ; 0001 009B                 PORTD=0x0B;
000120 e0eb      	LDI  R30,LOW(11)
000121 bbe2      	OUT  0x12,R30
                 ; 0001 009C             break;
                 ; 0001 009D         }
                 _0x2002F:
                 ; 0001 009E         Q2(PORT_out,numbers[(data_in/10)%10]);
000122 d046      	RCALL SUBOPT_0x2
000123 e0ea      	LDI  R30,LOW(10)
000124 e0f0      	LDI  R31,HIGH(10)
000125 d04a      	RCALL SUBOPT_0x3
                 ; 0001 009F         delay_ms(5);
                 ; 0001 00A0 
                 ; 0001 00A1         switch(PORT_en)
                 ; 0001 00A2         {
                 ; 0001 00A3             case port_A:
000126 f429      	BRNE _0x20037
                 ; 0001 00A4                 DDRA=0x0f;
000127 e0ef      	LDI  R30,LOW(15)
000128 bbea      	OUT  0x1A,R30
                 ; 0001 00A5                 PORTA=0x07;
000129 e0e7      	LDI  R30,LOW(7)
00012a bbeb      	OUT  0x1B,R30
                 ; 0001 00A6             break ;
00012b c01a      	RJMP _0x20036
                 ; 0001 00A7             case port_B:
                 _0x20037:
00012c 30e2      	CPI  R30,LOW(0x2)
00012d e0a0      	LDI  R26,HIGH(0x2)
00012e 07fa      	CPC  R31,R26
00012f f429      	BRNE _0x20038
                 ; 0001 00A8                 DDRB=0x0f;
000130 e0ef      	LDI  R30,LOW(15)
000131 bbe7      	OUT  0x17,R30
                 ; 0001 00A9                 PORTB=0x07;
000132 e0e7      	LDI  R30,LOW(7)
000133 bbe8      	OUT  0x18,R30
                 ; 0001 00AA             break;
000134 c011      	RJMP _0x20036
                 ; 0001 00AB             case port_C:
                 _0x20038:
000135 30e3      	CPI  R30,LOW(0x3)
000136 e0a0      	LDI  R26,HIGH(0x3)
000137 07fa      	CPC  R31,R26
000138 f429      	BRNE _0x20039
                 ; 0001 00AC                 DDRC=0x0f;
000139 e0ef      	LDI  R30,LOW(15)
00013a bbe4      	OUT  0x14,R30
                 ; 0001 00AD                 PORTC=0x07;
00013b e0e7      	LDI  R30,LOW(7)
00013c bbe5      	OUT  0x15,R30
                 ; 0001 00AE             break;
00013d c008      	RJMP _0x20036
                 ; 0001 00AF             case port_D:
                 _0x20039:
00013e 30e4      	CPI  R30,LOW(0x4)
00013f e0a0      	LDI  R26,HIGH(0x4)
000140 07fa      	CPC  R31,R26
000141 f421      	BRNE _0x20036
                 ; 0001 00B0                 DDRD=0x0f;
000142 e0ef      	LDI  R30,LOW(15)
000143 bbe1      	OUT  0x11,R30
                 ; 0001 00B1                 PORTD=0x07;
000144 e0e7      	LDI  R30,LOW(7)
000145 bbe2      	OUT  0x12,R30
                 ; 0001 00B2             break;
                 ; 0001 00B3         }
                 _0x20036:
                 ; 0001 00B4         Q2(PORT_out,numbers[(data_in/1)%10]);
000146 d022      	RCALL SUBOPT_0x2
000147 e0ea      	LDI  R30,LOW(10)
000148 e0f0      	LDI  R31,HIGH(10)
000149 940e 01a0 	CALL __MODW21U
00014b 01de      	MOVW R26,R28
00014c 9614      	ADIW R26,4
00014d 0fae      	ADD  R26,R30
00014e 1fbf      	ADC  R27,R31
00014f 91ac      	LD   R26,X
000150 27bb      	CLR  R27
000151 df0a      	RCALL _Q2
                 ; 0001 00B5         delay_ms(5);
000152 e0a5      	LDI  R26,LOW(5)
000153 e0b0      	LDI  R27,0
000154 940e 0183 	CALL _delay_ms
                 ; 0001 00B6     }
                +
000156 5f0f     +SUBI R16 , LOW ( - 1 )
000157 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000158 cf5b      	RJMP _0x2001D
                 _0x2001E:
                 ; 0001 00B7 }
000159 8119      	LDD  R17,Y+1
00015a 8108      	LDD  R16,Y+0
00015b 9660      	ADIW R28,16
00015c 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
00015d e0b0      	LDI  R27,0
00015e defd      	RCALL _Q2
00015f 81aa      	LDD  R26,Y+2
000160 81bb      	LDD  R27,Y+2+1
000161 940c 0183 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1:
000163 85ec      	LDD  R30,Y+12
000164 e0f0      	LDI  R31,0
000165 30e1      	CPI  R30,LOW(0x1)
000166 e0a0      	LDI  R26,HIGH(0x1)
000167 07fa      	CPC  R31,R26
000168 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
000169 85ed      	LDD  R30,Y+13
00016a e0f0      	LDI  R31,0
00016b 93fa      	ST   -Y,R31
00016c 93ea      	ST   -Y,R30
00016d 89a8      	LDD  R26,Y+16
00016e 89b9      	LDD  R27,Y+16+1
00016f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:35 WORDS
                 SUBOPT_0x3:
000170 940e 018d 	CALL __DIVW21U
000172 01df      	MOVW R26,R30
000173 e0ea      	LDI  R30,LOW(10)
000174 e0f0      	LDI  R31,HIGH(10)
000175 940e 01a0 	CALL __MODW21U
000177 01de      	MOVW R26,R28
000178 9614      	ADIW R26,4
000179 0fae      	ADD  R26,R30
00017a 1fbf      	ADC  R27,R31
00017b 91ac      	LD   R26,X
00017c 27bb      	CLR  R27
00017d dede      	RCALL _Q2
00017e e0a5      	LDI  R26,LOW(5)
00017f e0b0      	LDI  R27,0
000180 940e 0183 	CALL _delay_ms
000182 cfe0      	RJMP SUBOPT_0x1
                 
                 
                 	.CSEG
                 _delay_ms:
000183 9610      	adiw r26,0
000184 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000185 ed80     +LDI R24 , LOW ( 0x7D0 )
000186 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000187 9701     +SBIW R24 , 1
000188 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000189 95a8      	wdr
00018a 9711      	sbiw r26,1
00018b f7c9      	brne __delay_ms0
                 __delay_ms1:
00018c 9508      	ret
                 
                 __DIVW21U:
00018d 2400      	CLR  R0
00018e 2411      	CLR  R1
00018f e190      	LDI  R25,16
                 __DIVW21U1:
000190 0faa      	LSL  R26
000191 1fbb      	ROL  R27
000192 1c00      	ROL  R0
000193 1c11      	ROL  R1
000194 1a0e      	SUB  R0,R30
000195 0a1f      	SBC  R1,R31
000196 f418      	BRCC __DIVW21U2
000197 0e0e      	ADD  R0,R30
000198 1e1f      	ADC  R1,R31
000199 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00019a 60a1      	SBR  R26,1
                 __DIVW21U3:
00019b 959a      	DEC  R25
00019c f799      	BRNE __DIVW21U1
00019d 01fd      	MOVW R30,R26
00019e 01d0      	MOVW R26,R0
00019f 9508      	RET
                 
                 __MODW21U:
0001a0 dfec      	RCALL __DIVW21U
0001a1 01fd      	MOVW R30,R26
0001a2 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
0001a3 0fac      	ADD  R26,R28
0001a4 1fbd      	ADC  R27,R29
                 __INITLOC0:
0001a5 9005      	LPM  R0,Z+
0001a6 920d      	ST   X+,R0
0001a7 958a      	DEC  R24
0001a8 f7e1      	BRNE __INITLOC0
0001a9 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   7 r1 :   4 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  10 r17:  11 r18:   0 r19:   0 r20:   0 r21:   0 r22:   0 r23:   0 
r24:   8 r25:   4 r26:  65 r27:  16 r28:   8 r29:   2 r30: 141 r31:  45 
x  :   5 y  :  38 z  :   1 
Registers used: 15 out of 35 (42.9%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   4 
adiw  :   6 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   1 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   1 brmi  :   0 brne  :  26 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   6 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   6 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   1 cpc   :  19 cpi   :  18 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   0 jmp   :  23 ld    :   6 ldd   :  14 ldi   : 111 
lds   :   0 lpm   :   1 lsl   :   1 lsr   :   0 mov   :   1 movw  :   6 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  46 pop   :   0 push  :   0 rcall :  16 ret   :   9 
reti  :   0 rjmp  :  22 rol   :   3 ror   :   0 sbc   :   1 sbci  :   2 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   4 sbr   :   1 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  23 std   :   0 sts   :   0 sub   :   1 subi  :   2 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 36 out of 116 (31.0%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000354    842     10    852   16384   5.2%
[.dseg] 0x000060 0x000160      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
