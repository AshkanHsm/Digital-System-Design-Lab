;#include <HeaderFiles.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;
;void ADC_init_Q1()
; 0001 0005 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0006 
; 0001 0007     // ADC initialization
; 0001 0008     // ADC Clock frequency: 1000.000 kHz
; 0001 0009     // ADC Voltage Reference: AVCC pin
; 0001 000A     // ADC Auto Trigger Source: Free Running
; 0001 000B     ADMUX=ADC_VREF_TYPE;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0001 000C     ADCSRA=(1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0001 000D     SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0001 000E 
; 0001 000F }
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;void ADC_init_Q2()
; 0001 0011 {
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0001 0012     // ADC initialization
; 0001 0013     // ADC Clock frequency: 1000.000 kHz
; 0001 0014     // ADC Voltage Reference: AVCC pin
; 0001 0015     // ADC Auto Trigger Source: Free Running
; 0001 0016     ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0001 0017     ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0001 0018     SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0001 0019 }
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;unsigned int read_adc(unsigned char adc_input)
; 0001 001B {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0001 001C     ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $00000023 VOL: 0
;	adc_input -> Y+0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0001 001D     // Delay needed for the stabilization of the ADC input voltage
; 0001 001E     delay_us(10);
;PCODE: $00000027 VOL: 0
; 0001 001F     // Start the AD conversion
; 0001 0020     ADCSRA|=(1<<ADSC);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0001 0021     // Wait for the AD conversion to complete
; 0001 0022     while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0001 0023     ADCSRA|=(1<<ADIF);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0001 0024     return ADCW;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0001 0025 }
;PCODE: $00000035 VOL: 0
;
;int ADC_To_Voltage(char adc_Channel,int adc_Value)
; 0001 0028 {
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0001 0029      int voltage=0;
; 0001 002A     ADC_Value=read_adc(adc_Channel);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;	adc_Channel -> Y+4
;	adc_Value -> Y+2
;	voltage -> R16,R17
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0001 002B     //convert Dout to Voltage_mv
; 0001 002C     voltage=ADC_Value*4.88;   // taghriban !!!   Vin= Dout*5*1000/1024
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0001 002D 
; 0001 002E     return voltage;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0001 002F 
; 0001 0030 }
;PCODE: $0000004D VOL: 0
;
;void Save_Voltage_ADC_ByChannel_Q1(char adc_Channel)
; 0001 0033 {
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0001 0034      int voltage=0;
; 0001 0035      ADC_Value=read_adc(adc_Channel);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;	adc_Channel -> Y+2
;	voltage -> R16,R17
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0001 0036      voltage =ADC_To_Voltage(adc_Channel,ADC_Value);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0001 0037      MySaved_Voltage[adc_Channel]= voltage;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0001 0038 }
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;void Display_Voltage_ByChannel(char adc_Channel){
; 0001 0039 void Display_Voltage_ByChannel(char adc_Channel){
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0001 003A         sprintf(adcStringINPUT,"Ch:%d (%d mv)",adc_Channel,MySaved_Voltage[adc_Channel]);
;PCODE: $0000006C VOL: 0
;	adc_Channel -> Y+0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0001 003B         lcd_puts(adcStringINPUT);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0001 003C }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;
;
;void Display_Voltage_AllChannels(){
; 0001 003F void Display_Voltage_AllChannels(){
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0001 0040        int i=0;
; 0001 0041        while(i<=7){
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;	i -> R16,R17
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0001 0042            Display_Voltage_ByChannel(i);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0001 0043            delay_ms(500);
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0001 0044            lcd_clear();
;PCODE: $00000094 VOL: 0
; 0001 0045            i++;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0001 0046        }
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0001 0047 }
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;
;
;// ===============QUEstion 1 !! ======================================
;void Question1(){
; 0001 004B void Question1(){
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0001 004C        int i=0;
; 0001 004D        while(i<=7){   // first capture ADC values and convert them to voltage and save them to [MySaved_Voltage]
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;	i -> R16,R17
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0001 004E            Save_Voltage_ADC_ByChannel_Q1(i);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0001 004F            i++;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0001 0050        }
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0001 0051        Display_Voltage_AllChannels();
;PCODE: $000000AC VOL: 0
; 0001 0052 }
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;
;//---------------q2
; void interupt_ADC_Q2(){
; 0001 0055 void interupt_ADC_Q2(){
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0001 0056 
; 0001 0057     static unsigned char input_index=0;
; 0001 0058     // Read the AD conversion result
; 0001 0059     adc_data[input_index]=ADCW;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0001 005A     // Select next ADC input
; 0001 005B     if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0001 005C        input_index=0;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0001 005D     ADMUX=(FIRST_ADC_INPUT | ADC_VREF_TYPE)+input_index;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0001 005E     // Delay needed for the stabilization of the ADC input voltage
; 0001 005F     delay_us(10);
;PCODE: $000000C4 VOL: 0
; 0001 0060     // Start the AD conversion
; 0001 0061     ADCSRA|=(1<<ADSC);
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0001 0062  }
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;
;
; void Detect_Voltage_change(){
; 0001 0065 void Detect_Voltage_change(){
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0001 0066    int i =0;
; 0001 0067    int New_Voltage=0;
; 0001 0068    int deltaVoltage=0;
; 0001 0069    char Changed=0;
; 0001 006A    while(i<=7)
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;	i -> R16,R17
;	New_Voltage -> R18,R19
;	deltaVoltage -> R20,R21
;	Changed -> Y+6
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0001 006B    {
; 0001 006C       New_Voltage=adc_data[i]*4.88;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0001 006D       if( New_Voltage< MySaved_Voltage[i]) {
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0001 006E         deltaVoltage=MySaved_Voltage[i]-New_Voltage;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0001 006F       }
; 0001 0070       else  {
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0001 0071       deltaVoltage=New_Voltage-MySaved_Voltage[i];
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0001 0072       }
;PCODE: $000000FC VOL: 0
; 0001 0073 
; 0001 0074 
; 0001 0075       if(MySaved_Voltage[i]/20<deltaVoltage){
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0001 0076 
; 0001 0077             MySaved_Voltage[i]=New_Voltage;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0001 0078             changedValue_Channel=i;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0001 0079             Changed=1;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0001 007A             break;
;PCODE: $00000110 VOL: 0
; 0001 007B 
; 0001 007C       }
; 0001 007D       i++;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0001 007E 
; 0001 007F    }
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0001 0080    if (Changed==0)
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0001 0081      changedValue_Channel=10; // mean No change
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0001 0082 
; 0001 0083  }
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;
; void Question2(){
; 0001 0085 void Question2(){
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0001 0086     Detect_Voltage_change();
;PCODE: $00000122 VOL: 0
; 0001 0087     if( changedValue_Channel<=7 &&changedValue_Channel>=0){
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0001 0088         lcd_clear();
;PCODE: $0000012D VOL: 0
; 0001 0089         Display_Voltage_ByChannel(changedValue_Channel);
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0001 008A          delay_ms(100);
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0001 008B 
; 0001 008C     }
; 0001 008D  }
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; void Display_changedVoltages_Q2(){
; 0001 008E void Display_changedVoltages_Q2(){
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0001 008F        Display_Voltage_ByChannel(changedValue_Channel);
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0001 0090 }
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;
; void Question3(){
; 0001 0092 void Question3(){
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0001 0093     OCR0=adc_data[0]/4;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0001 0094  }
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
