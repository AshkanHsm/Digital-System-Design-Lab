
AVRASM ver. 2.1.30  C:\Users\user\Desktop\AZ1-AshkanHashemi-9830113\CodeVisionFolder\Debug\List\AZ1.asm Wed Oct 12 21:51:41 2022

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 002c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x3:
00002a 927c      	.DB  0x7C,0x92
                 
                 __GLOBAL_INI_TBL:
                 _0xFFFFFFFF:
00002b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00002c 94f8      	CLI
00002d 27ee      	CLR  R30
00002e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00002f e0f1      	LDI  R31,1
000030 bffb      	OUT  GICR,R31
000031 bfeb      	OUT  GICR,R30
000032 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000033 e08d      	LDI  R24,(14-2)+1
000034 e0a2      	LDI  R26,2
000035 27bb      	CLR  R27
                 __CLEAR_REG:
000036 93ed      	ST   X+,R30
000037 958a      	DEC  R24
000038 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000039 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003a e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00003b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00003c 93ed      	ST   X+,R30
00003d 9701      	SBIW R24,1
00003e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00003f e5e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000040 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000041 9185      	LPM  R24,Z+
000042 9195      	LPM  R25,Z+
000043 9700      	SBIW R24,0
000044 f061      	BREQ __GLOBAL_INI_END
000045 91a5      	LPM  R26,Z+
000046 91b5      	LPM  R27,Z+
000047 9005      	LPM  R0,Z+
000048 9015      	LPM  R1,Z+
000049 01bf      	MOVW R22,R30
00004a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00004b 9005      	LPM  R0,Z+
00004c 920d      	ST   X+,R0
00004d 9701      	SBIW R24,1
00004e f7e1      	BRNE __GLOBAL_INI_LOOP
00004f 01fb      	MOVW R30,R22
000050 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000051 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000052 bfed      	OUT  SPL,R30
000053 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000054 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000055 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000056 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000057 940c 0059 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*
                 ; * AZ1.c
                 ; *
                 ; * Created: 10/5/2022 6:15:12 PM
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;
                 ;#include <mega16.h>
                 ;#include <delay.h>
                 ;const int Delaytime=37500;
                 
                 	.DSEG
                 ;
                 ;void Start();
                 ;void BlinkLED_Q1();
                 ;void LedLightDance_Q2();
                 ;void SwitchToLed_Q3();
                 ;void UpDownCount_Q4();
                 ;void SevenSegDecrease_Q5();
                 ;void SevenSegShowNumber(int SegmentNumber,int dot);
                 ;void SevenSegZeroButton_Q6();
                 ;
                 ;//Main---------------------------------------------------
                 ;void main(void)
                 ; 0000 0019 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 001A     Start();
000059 d008      	RCALL _Start
                 ; 0000 001B   BlinkLED_Q1();
00005a d00f      	RCALL _BlinkLED_Q1
                 ; 0000 001C    LedLightDance_Q2();
00005b d028      	RCALL _LedLightDance_Q2
                 ; 0000 001D     UpDownCount_Q4()  ;
00005c d03c      	RCALL _UpDownCount_Q4
                 ; 0000 001E     SevenSegDecrease_Q5();
00005d d058      	RCALL _SevenSegDecrease_Q5
                 ; 0000 001F 
                 ; 0000 0020 while (1)
                 _0x4:
                 ; 0000 0021     {
                 ; 0000 0022          SwitchToLed_Q3();
00005e d037      	RCALL _SwitchToLed_Q3
                 ; 0000 0023          SevenSegZeroButton_Q6();
00005f d0f4      	RCALL _SevenSegZeroButton_Q6
                 ; 0000 0024     }
000060 cffd      	RJMP _0x4
                 ; 0000 0025 }
                 _0x7:
000061 cfff      	RJMP _0x7
                 ; .FEND
                 ;
                 ;//-----------------------------------------------------------
                 ;
                 ;
                 ;void Start(){
                 ; 0000 002A void Start(){
                 _Start:
                 ; .FSTART _Start
                 ; 0000 002B     DDRA=0x00;
000062 e0e0      	LDI  R30,LOW(0)
000063 bbea      	OUT  0x1A,R30
                 ; 0000 002C     DDRB=0xff;
000064 efef      	LDI  R30,LOW(255)
000065 bbe7      	OUT  0x17,R30
                 ; 0000 002D     DDRC=0xff;
000066 bbe4      	OUT  0x14,R30
                 ; 0000 002E     DDRD=0x0f;
000067 e0ef      	LDI  R30,LOW(15)
000068 bbe1      	OUT  0x11,R30
                 ; 0000 002F }
000069 9508      	RET
                 ; .FEND
                 ;void BlinkLED_Q1()
                 ; 0000 0031 {
                 _BlinkLED_Q1:
                 ; .FSTART _BlinkLED_Q1
                 ; 0000 0032     int i=0;
                 ; 0000 0033     for(i=0;i<4;i++){
00006a 931a      	ST   -Y,R17
00006b 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                +
00006c e000     +LDI R16 , LOW ( 0 )
00006d e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
00006e e000     +LDI R16 , LOW ( 0 )
00006f e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x9:
                +
000070 3004     +CPI R16 , LOW ( 4 )
000071 e0e0     +LDI R30 , HIGH ( 4 )
000072 071e     +CPC R17 , R30
                 	__CPWRN 16,17,4
000073 f47c      	BRGE _0xA
                 ; 0000 0034         PORTB=0xff;
000074 efef      	LDI  R30,LOW(255)
000075 bbe8      	OUT  0x18,R30
                 ; 0000 0035         delay_ms(500);
000076 efa4      	LDI  R26,LOW(500)
000077 e0b1      	LDI  R27,HIGH(500)
000078 940e 0234 	CALL _delay_ms
                 ; 0000 0036         PORTB=0x00;
00007a e0e0      	LDI  R30,LOW(0)
00007b bbe8      	OUT  0x18,R30
                 ; 0000 0037         delay_ms(500);
00007c efa4      	LDI  R26,LOW(500)
00007d e0b1      	LDI  R27,HIGH(500)
00007e 940e 0234 	CALL _delay_ms
                 ; 0000 0038     }
                +
000080 5f0f     +SUBI R16 , LOW ( - 1 )
000081 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000082 cfed      	RJMP _0x9
                 _0xA:
                 ; 0000 0039 }
000083 c02f      	RJMP _0x2000001
                 ; .FEND
                 ;void LedLightDance_Q2()
                 ; 0000 003B {
                 _LedLightDance_Q2:
                 ; .FSTART _LedLightDance_Q2
                 ; 0000 003C     PORTB=0b10000000;
000084 e8e0      	LDI  R30,LOW(128)
000085 d157      	RCALL SUBOPT_0x0
                 ; 0000 003D     delay_us(Delaytime);
                 ; 0000 003E     PORTB=0b01000000;
000086 e4e0      	LDI  R30,LOW(64)
000087 d155      	RCALL SUBOPT_0x0
                 ; 0000 003F     delay_us(Delaytime);
                 ; 0000 0040     PORTB=0b00100000;
000088 e2e0      	LDI  R30,LOW(32)
000089 d153      	RCALL SUBOPT_0x0
                 ; 0000 0041     delay_us(Delaytime);
                 ; 0000 0042     PORTB=0b00010000;
00008a e1e0      	LDI  R30,LOW(16)
00008b d151      	RCALL SUBOPT_0x0
                 ; 0000 0043     delay_us(Delaytime);
                 ; 0000 0044     PORTB=0b00001000;
00008c e0e8      	LDI  R30,LOW(8)
00008d d14f      	RCALL SUBOPT_0x0
                 ; 0000 0045     delay_us(Delaytime);
                 ; 0000 0046     PORTB=0b00000100;
00008e e0e4      	LDI  R30,LOW(4)
00008f d14d      	RCALL SUBOPT_0x0
                 ; 0000 0047     delay_us(Delaytime);
                 ; 0000 0048     PORTB=0b00000010;
000090 e0e2      	LDI  R30,LOW(2)
000091 d14b      	RCALL SUBOPT_0x0
                 ; 0000 0049     delay_us(Delaytime);
                 ; 0000 004A     PORTB=0b00000001;
000092 e0e1      	LDI  R30,LOW(1)
000093 d149      	RCALL SUBOPT_0x0
                 ; 0000 004B     delay_us(Delaytime);
                 ; 0000 004C     PORTB=0b10000000;
000094 e8e0      	LDI  R30,LOW(128)
000095 c001      	RJMP _0x2000002
                 ; 0000 004D }
                 ; .FEND
                 ;
                 ;void SwitchToLed_Q3()
                 ; 0000 0050 {
                 _SwitchToLed_Q3:
                 ; .FSTART _SwitchToLed_Q3
                 ; 0000 0051     PORTB=PINA;
000096 b3e9      	IN   R30,0x19
                 _0x2000002:
000097 bbe8      	OUT  0x18,R30
                 ; 0000 0052 }
000098 9508      	RET
                 ; .FEND
                 ;
                 ;void UpDownCount_Q4()
                 ; 0000 0055 {
                 _UpDownCount_Q4:
                 ; .FSTART _UpDownCount_Q4
                 ; 0000 0056     int DelayTime=700;
                 ; 0000 0057     PORTD=0x00;
000099 931a      	ST   -Y,R17
00009a 930a      	ST   -Y,R16
                 ;	DelayTime -> R16,R17
                +
00009b eb0c     +LDI R16 , LOW ( 700 )
00009c e012     +LDI R17 , HIGH ( 700 )
                 	__GETWRN 16,17,700
00009d e0e0      	LDI  R30,LOW(0)
00009e bbe2      	OUT  0x12,R30
                 ; 0000 0058       PORTC=0b01101111;
00009f e6ef      	LDI  R30,LOW(111)
0000a0 d146      	RCALL SUBOPT_0x1
                 ; 0000 0059       delay_ms(DelayTime);
                 ; 0000 005A       PORTC= 0b01111111;
0000a1 e7ef      	LDI  R30,LOW(127)
0000a2 d144      	RCALL SUBOPT_0x1
                 ; 0000 005B       delay_ms(DelayTime);
                 ; 0000 005C       PORTC= 0b00000111;
0000a3 e0e7      	LDI  R30,LOW(7)
0000a4 d142      	RCALL SUBOPT_0x1
                 ; 0000 005D       delay_ms(DelayTime);
                 ; 0000 005E       PORTC=  0b01111101;
0000a5 e7ed      	LDI  R30,LOW(125)
0000a6 d140      	RCALL SUBOPT_0x1
                 ; 0000 005F       delay_ms(DelayTime);
                 ; 0000 0060       PORTC=  0b01101101;
0000a7 e6ed      	LDI  R30,LOW(109)
0000a8 d13e      	RCALL SUBOPT_0x1
                 ; 0000 0061       delay_ms(DelayTime);
                 ; 0000 0062       PORTC=   0b01100110;
0000a9 e6e6      	LDI  R30,LOW(102)
0000aa d13c      	RCALL SUBOPT_0x1
                 ; 0000 0063       delay_ms(DelayTime);
                 ; 0000 0064       PORTC=   0b01001111;
0000ab e4ef      	LDI  R30,LOW(79)
0000ac d13a      	RCALL SUBOPT_0x1
                 ; 0000 0065       delay_ms(DelayTime);
                 ; 0000 0066       PORTC=    0b01011011;
0000ad e5eb      	LDI  R30,LOW(91)
0000ae d138      	RCALL SUBOPT_0x1
                 ; 0000 0067       delay_ms(DelayTime);
                 ; 0000 0068       PORTC=    0b00000110;
0000af e0e6      	LDI  R30,LOW(6)
0000b0 d136      	RCALL SUBOPT_0x1
                 ; 0000 0069       delay_ms(DelayTime);
                 ; 0000 006A       PORTC=   0b00111111;
0000b1 e3ef      	LDI  R30,LOW(63)
0000b2 d134      	RCALL SUBOPT_0x1
                 ; 0000 006B       delay_ms(DelayTime);
                 ; 0000 006C 
                 ; 0000 006D }
                 _0x2000001:
0000b3 9109      	LD   R16,Y+
0000b4 9119      	LD   R17,Y+
0000b5 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;void SevenSegDecrease_Q5()
                 ; 0000 0073 {
                 _SevenSegDecrease_Q5:
                 ; .FSTART _SevenSegDecrease_Q5
                 ; 0000 0074     int h,d,u,dp;
                 ; 0000 0075     int x,y;
                 ; 0000 0076     int i;
                 ; 0000 0077     x=PINA;
0000b6 9728      	SBIW R28,8
0000b7 940e 0275 	CALL __SAVELOCR6
                 ;	h -> R16,R17
                 ;	d -> R18,R19
                 ;	u -> R20,R21
                 ;	dp -> Y+12
                 ;	x -> Y+10
                 ;	y -> Y+8
                 ;	i -> Y+6
0000b9 b3e9      	IN   R30,0x19
0000ba e0f0      	LDI  R31,0
0000bb 87ea      	STD  Y+10,R30
0000bc 87fb      	STD  Y+10+1,R31
                 ; 0000 0078     y=PINA;
0000bd b3e9      	IN   R30,0x19
0000be e0f0      	LDI  R31,0
0000bf 87e8      	STD  Y+8,R30
0000c0 87f9      	STD  Y+8+1,R31
                 ; 0000 0079 
                 ; 0000 007A     y=y*10;
0000c1 d129      	RCALL SUBOPT_0x2
0000c2 87e8      	STD  Y+8,R30
0000c3 87f9      	STD  Y+8+1,R31
                 ; 0000 007B     while (y+2){
                 _0xB:
0000c4 85e8      	LDD  R30,Y+8
0000c5 85f9      	LDD  R31,Y+8+1
0000c6 9632      	ADIW R30,2
0000c7 f1d9      	BREQ _0xD
                 ; 0000 007C     for (i=0;i<10;i++) {
0000c8 e0e0      	LDI  R30,LOW(0)
0000c9 83ee      	STD  Y+6,R30
0000ca 83ef      	STD  Y+6+1,R30
                 _0xF:
0000cb 81ae      	LDD  R26,Y+6
0000cc 81bf      	LDD  R27,Y+6+1
0000cd 971a      	SBIW R26,10
0000ce f574      	BRGE _0x10
                 ; 0000 007D     x=y;
0000cf 85e8      	LDD  R30,Y+8
0000d0 85f9      	LDD  R31,Y+8+1
0000d1 87ea      	STD  Y+10,R30
0000d2 87fb      	STD  Y+10+1,R31
                 ; 0000 007E     h=x/1000;
0000d3 85aa      	LDD  R26,Y+10
0000d4 85bb      	LDD  R27,Y+10+1
0000d5 d11a      	RCALL SUBOPT_0x3
                 ; 0000 007F     x=x-h*1000;
0000d6 d123      	RCALL SUBOPT_0x4
                 ; 0000 0080     PORTD=0x0E;
0000d7 e0ee      	LDI  R30,LOW(14)
0000d8 bbe2      	OUT  0x12,R30
                 ; 0000 0081     SevenSegShowNumber(h,0);
0000d9 931a      	ST   -Y,R17
0000da 930a      	ST   -Y,R16
0000db d125      	RCALL SUBOPT_0x5
                 ; 0000 0082     delay_ms(5);
                 ; 0000 0083     d=x/100;
0000dc d12e      	RCALL SUBOPT_0x6
                 ; 0000 0084     x=x-d*100;
0000dd d11c      	RCALL SUBOPT_0x4
                 ; 0000 0085     PORTD=0x0D;
0000de e0ed      	LDI  R30,LOW(13)
0000df bbe2      	OUT  0x12,R30
                 ; 0000 0086     SevenSegShowNumber(d,0);
0000e0 933a      	ST   -Y,R19
0000e1 932a      	ST   -Y,R18
0000e2 d11e      	RCALL SUBOPT_0x5
                 ; 0000 0087     delay_ms(5);
                 ; 0000 0088     u=x/10;
0000e3 d131      	RCALL SUBOPT_0x7
                 ; 0000 0089     x=x-u*10;
0000e4 d115      	RCALL SUBOPT_0x4
                 ; 0000 008A     PORTD=0x0B;
0000e5 e0eb      	LDI  R30,LOW(11)
0000e6 bbe2      	OUT  0x12,R30
                 ; 0000 008B     SevenSegShowNumber(u,1);
0000e7 935a      	ST   -Y,R21
0000e8 934a      	ST   -Y,R20
0000e9 e0a1      	LDI  R26,LOW(1)
0000ea d130      	RCALL SUBOPT_0x8
                 ; 0000 008C     delay_ms(5);
                 ; 0000 008D     dp=x;
0000eb 85ea      	LDD  R30,Y+10
0000ec 85fb      	LDD  R31,Y+10+1
0000ed 87ec      	STD  Y+12,R30
0000ee 87fd      	STD  Y+12+1,R31
                 ; 0000 008E     PORTD=0x07;
0000ef e0e7      	LDI  R30,LOW(7)
0000f0 bbe2      	OUT  0x12,R30
                 ; 0000 008F     SevenSegShowNumber(dp,0);
0000f1 85ec      	LDD  R30,Y+12
0000f2 85fd      	LDD  R31,Y+12+1
0000f3 93fa      	ST   -Y,R31
0000f4 93ea      	ST   -Y,R30
0000f5 e0a0      	LDI  R26,LOW(0)
0000f6 d124      	RCALL SUBOPT_0x8
                 ; 0000 0090     delay_ms(5);}
0000f7 81ee      	LDD  R30,Y+6
0000f8 81ff      	LDD  R31,Y+6+1
0000f9 9631      	ADIW R30,1
0000fa 83ee      	STD  Y+6,R30
0000fb 83ff      	STD  Y+6+1,R31
0000fc cfce      	RJMP _0xF
                 _0x10:
                 ; 0000 0091     y=y-2;
0000fd 85e8      	LDD  R30,Y+8
0000fe 85f9      	LDD  R31,Y+8+1
0000ff 9732      	SBIW R30,2
000100 87e8      	STD  Y+8,R30
000101 87f9      	STD  Y+8+1,R31
                 ; 0000 0092 
                 ; 0000 0093     }
000102 cfc1      	RJMP _0xB
                 _0xD:
                 ; 0000 0094 
                 ; 0000 0095 
                 ; 0000 0096 
                 ; 0000 0097 }
000103 940e 027c 	CALL __LOADLOCR6
000105 962e      	ADIW R28,14
000106 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void SevenSegShowNumber(int SegmentNumber,int dot)
                 ; 0000 009B {
                 _SevenSegShowNumber:
                 ; .FSTART _SevenSegShowNumber
                 ; 0000 009C 
                 ; 0000 009D     int b= SegmentNumber;
                 ; 0000 009E     if (b==0)
000107 93ba      	ST   -Y,R27
000108 93aa      	ST   -Y,R26
000109 931a      	ST   -Y,R17
00010a 930a      	ST   -Y,R16
                 ;	SegmentNumber -> Y+4
                 ;	dot -> Y+2
                 ;	b -> R16,R17
                +
00010b 810c     +LDD R16 , Y + 4
00010c 811d     +LDD R17 , Y + 4 + 1
                 	__GETWRS 16,17,4
00010d 2e00      	MOV  R0,R16
00010e 2a01      	OR   R0,R17
00010f f411      	BRNE _0x11
                 ; 0000 009F     {
                 ; 0000 00A0         PORTC=0b00111111;
000110 e3ef      	LDI  R30,LOW(63)
000111 c038      	RJMP _0x34
                 ; 0000 00A1     }
                 ; 0000 00A2     else if(b==1)
                 _0x11:
000112 e0e1      	LDI  R30,LOW(1)
000113 e0f0      	LDI  R31,HIGH(1)
000114 17e0      	CP   R30,R16
000115 07f1      	CPC  R31,R17
000116 f411      	BRNE _0x13
                 ; 0000 00A3     {
                 ; 0000 00A4         PORTC=    0b00000110;
000117 e0e6      	LDI  R30,LOW(6)
000118 c031      	RJMP _0x34
                 ; 0000 00A5     }
                 ; 0000 00A6     else if(b==2)
                 _0x13:
000119 e0e2      	LDI  R30,LOW(2)
00011a e0f0      	LDI  R31,HIGH(2)
00011b 17e0      	CP   R30,R16
00011c 07f1      	CPC  R31,R17
00011d f411      	BRNE _0x15
                 ; 0000 00A7     {
                 ; 0000 00A8        PORTC=    0b01011011;
00011e e5eb      	LDI  R30,LOW(91)
00011f c02a      	RJMP _0x34
                 ; 0000 00A9     }
                 ; 0000 00AA     else if(b==3)
                 _0x15:
000120 e0e3      	LDI  R30,LOW(3)
000121 e0f0      	LDI  R31,HIGH(3)
000122 17e0      	CP   R30,R16
000123 07f1      	CPC  R31,R17
000124 f411      	BRNE _0x17
                 ; 0000 00AB     {
                 ; 0000 00AC         PORTC=   0b01001111;
000125 e4ef      	LDI  R30,LOW(79)
000126 c023      	RJMP _0x34
                 ; 0000 00AD     }
                 ; 0000 00AE     else if(b==4){
                 _0x17:
000127 e0e4      	LDI  R30,LOW(4)
000128 e0f0      	LDI  R31,HIGH(4)
000129 17e0      	CP   R30,R16
00012a 07f1      	CPC  R31,R17
00012b f411      	BRNE _0x19
                 ; 0000 00AF         PORTC=   0b01100110;
00012c e6e6      	LDI  R30,LOW(102)
00012d c01c      	RJMP _0x34
                 ; 0000 00B0     }
                 ; 0000 00B1     else if(b==5){
                 _0x19:
00012e e0e5      	LDI  R30,LOW(5)
00012f e0f0      	LDI  R31,HIGH(5)
000130 17e0      	CP   R30,R16
000131 07f1      	CPC  R31,R17
000132 f411      	BRNE _0x1B
                 ; 0000 00B2          PORTC=  0b01101101;
000133 e6ed      	LDI  R30,LOW(109)
000134 c015      	RJMP _0x34
                 ; 0000 00B3     }
                 ; 0000 00B4     else if(b==6){
                 _0x1B:
000135 e0e6      	LDI  R30,LOW(6)
000136 e0f0      	LDI  R31,HIGH(6)
000137 17e0      	CP   R30,R16
000138 07f1      	CPC  R31,R17
000139 f411      	BRNE _0x1D
                 ; 0000 00B5         PORTC=  0b01111101;
00013a e7ed      	LDI  R30,LOW(125)
00013b c00e      	RJMP _0x34
                 ; 0000 00B6     }
                 ; 0000 00B7     else if(b==7){
                 _0x1D:
00013c e0e7      	LDI  R30,LOW(7)
00013d e0f0      	LDI  R31,HIGH(7)
00013e 17e0      	CP   R30,R16
00013f 07f1      	CPC  R31,R17
000140 f409      	BRNE _0x1F
                 ; 0000 00B8         PORTC= 0b00000111;
000141 c008      	RJMP _0x34
                 ; 0000 00B9     }
                 ; 0000 00BA     else if(b==8){
                 _0x1F:
000142 e0e8      	LDI  R30,LOW(8)
000143 e0f0      	LDI  R31,HIGH(8)
000144 17e0      	CP   R30,R16
000145 07f1      	CPC  R31,R17
000146 f411      	BRNE _0x21
                 ; 0000 00BB          PORTC= 0b01111111;
000147 e7ef      	LDI  R30,LOW(127)
000148 c001      	RJMP _0x34
                 ; 0000 00BC     }
                 ; 0000 00BD     else
                 _0x21:
                 ; 0000 00BE      {
                 ; 0000 00BF       PORTC=0b01101111;
000149 e6ef      	LDI  R30,LOW(111)
                 _0x34:
00014a bbe5      	OUT  0x15,R30
                 ; 0000 00C0      }
                 ; 0000 00C1     if (dot==1){
00014b 81aa      	LDD  R26,Y+2
00014c 81bb      	LDD  R27,Y+2+1
00014d 9711      	SBIW R26,1
00014e f409      	BRNE _0x23
                 ; 0000 00C2         PORTC.7=1;
00014f 9aaf      	SBI  0x15,7
                 ; 0000 00C3     }
                 ; 0000 00C4 
                 ; 0000 00C5 }
                 _0x23:
000150 8119      	LDD  R17,Y+1
000151 8108      	LDD  R16,Y+0
000152 9626      	ADIW R28,6
000153 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void SevenSegZeroButton_Q6()
                 ; 0000 00C9 {
                 _SevenSegZeroButton_Q6:
                 ; .FSTART _SevenSegZeroButton_Q6
                 ; 0000 00CA         int h,d,u,dp;
                 ; 0000 00CB     int x,y;
                 ; 0000 00CC     char D4,D5,D6,D7;
                 ; 0000 00CD     char Doff4,Doff5,Doff6,Doff7;
                 ; 0000 00CE 
                 ; 0000 00CF      int i;
                 ; 0000 00D0 
                 ; 0000 00D1     x=PINA;
000154 9760      	SBIW R28,16
000155 940e 0275 	CALL __SAVELOCR6
                 ;	h -> R16,R17
                 ;	d -> R18,R19
                 ;	u -> R20,R21
                 ;	dp -> Y+20
                 ;	x -> Y+18
                 ;	y -> Y+16
                 ;	D4 -> Y+15
                 ;	D5 -> Y+14
                 ;	D6 -> Y+13
                 ;	D7 -> Y+12
                 ;	Doff4 -> Y+11
                 ;	Doff5 -> Y+10
                 ;	Doff6 -> Y+9
                 ;	Doff7 -> Y+8
                 ;	i -> Y+6
000157 b3e9      	IN   R30,0x19
000158 e0f0      	LDI  R31,0
000159 8bea      	STD  Y+18,R30
00015a 8bfb      	STD  Y+18+1,R31
                 ; 0000 00D2     y=PINA;
00015b b3e9      	IN   R30,0x19
00015c e0f0      	LDI  R31,0
00015d 8be8      	STD  Y+16,R30
00015e 8bf9      	STD  Y+16+1,R31
                 ; 0000 00D3 
                 ; 0000 00D4     y=y*10;
00015f d08b      	RCALL SUBOPT_0x2
000160 8be8      	STD  Y+16,R30
000161 8bf9      	STD  Y+16+1,R31
                 ; 0000 00D5     while (y+2){
                 _0x26:
000162 89e8      	LDD  R30,Y+16
000163 89f9      	LDD  R31,Y+16+1
000164 9632      	ADIW R30,2
000165 f409      	BRNE PC+2
000166 c072      	RJMP _0x28
                 ; 0000 00D6     D4=PIND.4;
000167 e0e0      	LDI  R30,0
000168 9984      	SBIC 0x10,4
000169 e0e1      	LDI  R30,1
00016a 87ef      	STD  Y+15,R30
                 ; 0000 00D7     D5=PIND.5;
00016b e0e0      	LDI  R30,0
00016c 9985      	SBIC 0x10,5
00016d e0e1      	LDI  R30,1
00016e 87ee      	STD  Y+14,R30
                 ; 0000 00D8     D6=PIND.6;
00016f e0e0      	LDI  R30,0
000170 9986      	SBIC 0x10,6
000171 e0e1      	LDI  R30,1
000172 87ed      	STD  Y+13,R30
                 ; 0000 00D9     D7=PIND.7;
000173 e0e0      	LDI  R30,0
000174 9987      	SBIC 0x10,7
000175 e0e1      	LDI  R30,1
000176 87ec      	STD  Y+12,R30
                 ; 0000 00DA 
                 ; 0000 00DB     for (i=0;i<10;i++) {
000177 e0e0      	LDI  R30,LOW(0)
000178 83ee      	STD  Y+6,R30
000179 83ef      	STD  Y+6+1,R30
                 _0x2A:
00017a 81ae      	LDD  R26,Y+6
00017b 81bf      	LDD  R27,Y+6+1
00017c 971a      	SBIW R26,10
00017d f00c      	BRLT PC+2
00017e c054      	RJMP _0x2B
                 ; 0000 00DC     x=y;
00017f 89e8      	LDD  R30,Y+16
000180 89f9      	LDD  R31,Y+16+1
000181 8bea      	STD  Y+18,R30
000182 8bfb      	STD  Y+18+1,R31
                 ; 0000 00DD 
                 ; 0000 00DE     h=x/1000;
000183 89aa      	LDD  R26,Y+18
000184 89bb      	LDD  R27,Y+18+1
000185 d06a      	RCALL SUBOPT_0x3
                 ; 0000 00DF     x=x-h*1000;
000186 d09a      	RCALL SUBOPT_0x9
                 ; 0000 00E0     PORTD=0x0E;
000187 e0ee      	LDI  R30,LOW(14)
000188 bbe2      	OUT  0x12,R30
                 ; 0000 00E1     if(!D4){
000189 85ef      	LDD  R30,Y+15
00018a 30e0      	CPI  R30,0
00018b f411      	BRNE _0x2C
                 ; 0000 00E2     SevenSegShowNumber(0,0);
00018c d09b      	RCALL SUBOPT_0xA
00018d c002      	RJMP _0x35
                 ; 0000 00E3     }
                 ; 0000 00E4     else{
                 _0x2C:
                 ; 0000 00E5     SevenSegShowNumber(h,0);
00018e 931a      	ST   -Y,R17
00018f 930a      	ST   -Y,R16
                 _0x35:
000190 e0a0      	LDI  R26,LOW(0)
000191 e0b0      	LDI  R27,0
000192 df74      	RCALL _SevenSegShowNumber
                 ; 0000 00E6     }
                 ; 0000 00E7 
                 ; 0000 00E8     delay_ms(5);
000193 d099      	RCALL SUBOPT_0xB
                 ; 0000 00E9     d=x/100;
000194 d076      	RCALL SUBOPT_0x6
                 ; 0000 00EA     x=x-d*100;
000195 d08b      	RCALL SUBOPT_0x9
                 ; 0000 00EB     PORTD=0x0D;
000196 e0ed      	LDI  R30,LOW(13)
000197 bbe2      	OUT  0x12,R30
                 ; 0000 00EC     if(!D5){
000198 85ee      	LDD  R30,Y+14
000199 30e0      	CPI  R30,0
00019a f411      	BRNE _0x2E
                 ; 0000 00ED     SevenSegShowNumber(0,0);
00019b d08c      	RCALL SUBOPT_0xA
00019c c002      	RJMP _0x36
                 ; 0000 00EE     }
                 ; 0000 00EF     else{
                 _0x2E:
                 ; 0000 00F0     SevenSegShowNumber(d,0);
00019d 933a      	ST   -Y,R19
00019e 932a      	ST   -Y,R18
                 _0x36:
00019f e0a0      	LDI  R26,LOW(0)
0001a0 e0b0      	LDI  R27,0
0001a1 df65      	RCALL _SevenSegShowNumber
                 ; 0000 00F1     }
                 ; 0000 00F2 
                 ; 0000 00F3     delay_ms(5);
0001a2 d08a      	RCALL SUBOPT_0xB
                 ; 0000 00F4     u=x/10;
0001a3 d071      	RCALL SUBOPT_0x7
                 ; 0000 00F5     x=x-u*10;
0001a4 d07c      	RCALL SUBOPT_0x9
                 ; 0000 00F6     PORTD=0x0B;
0001a5 e0eb      	LDI  R30,LOW(11)
0001a6 bbe2      	OUT  0x12,R30
                 ; 0000 00F7     if(!D6){
0001a7 85ed      	LDD  R30,Y+13
0001a8 30e0      	CPI  R30,0
0001a9 f419      	BRNE _0x30
                 ; 0000 00F8     SevenSegShowNumber(0,0);
0001aa d07d      	RCALL SUBOPT_0xA
0001ab e0a0      	LDI  R26,LOW(0)
0001ac c003      	RJMP _0x37
                 ; 0000 00F9     }
                 ; 0000 00FA     else{
                 _0x30:
                 ; 0000 00FB     SevenSegShowNumber(u,1);
0001ad 935a      	ST   -Y,R21
0001ae 934a      	ST   -Y,R20
0001af e0a1      	LDI  R26,LOW(1)
                 _0x37:
0001b0 e0b0      	LDI  R27,0
0001b1 df55      	RCALL _SevenSegShowNumber
                 ; 0000 00FC     }
                 ; 0000 00FD 
                 ; 0000 00FE     delay_ms(5);
0001b2 e0a5      	LDI  R26,LOW(5)
0001b3 e0b0      	LDI  R27,0
0001b4 940e 0234 	CALL _delay_ms
                 ; 0000 00FF     dp=x;
0001b6 89ea      	LDD  R30,Y+18
0001b7 89fb      	LDD  R31,Y+18+1
0001b8 8bec      	STD  Y+20,R30
0001b9 8bfd      	STD  Y+20+1,R31
                 ; 0000 0100     PORTD=0x07;
0001ba e0e7      	LDI  R30,LOW(7)
0001bb bbe2      	OUT  0x12,R30
                 ; 0000 0101     if(!D7){
0001bc 85ec      	LDD  R30,Y+12
0001bd 30e0      	CPI  R30,0
0001be f419      	BRNE _0x32
                 ; 0000 0102     SevenSegShowNumber(0,0);
0001bf e0e0      	LDI  R30,LOW(0)
0001c0 e0f0      	LDI  R31,HIGH(0)
0001c1 c002      	RJMP _0x38
                 ; 0000 0103     }
                 ; 0000 0104     else{
                 _0x32:
                 ; 0000 0105     SevenSegShowNumber(dp,0);
0001c2 89ec      	LDD  R30,Y+20
0001c3 89fd      	LDD  R31,Y+20+1
                 _0x38:
0001c4 93fa      	ST   -Y,R31
0001c5 93ea      	ST   -Y,R30
0001c6 e0a0      	LDI  R26,LOW(0)
0001c7 e0b0      	LDI  R27,0
0001c8 df3e      	RCALL _SevenSegShowNumber
                 ; 0000 0106     }
                 ; 0000 0107 
                 ; 0000 0108     delay_ms(5);}
0001c9 e0a5      	LDI  R26,LOW(5)
0001ca e0b0      	LDI  R27,0
0001cb 940e 0234 	CALL _delay_ms
0001cd 81ee      	LDD  R30,Y+6
0001ce 81ff      	LDD  R31,Y+6+1
0001cf 9631      	ADIW R30,1
0001d0 83ee      	STD  Y+6,R30
0001d1 83ff      	STD  Y+6+1,R31
0001d2 cfa7      	RJMP _0x2A
                 _0x2B:
                 ; 0000 0109     y=y-2;
0001d3 89e8      	LDD  R30,Y+16
0001d4 89f9      	LDD  R31,Y+16+1
0001d5 9732      	SBIW R30,2
0001d6 8be8      	STD  Y+16,R30
0001d7 8bf9      	STD  Y+16+1,R31
                 ; 0000 010A     }
0001d8 cf89      	RJMP _0x26
                 _0x28:
                 ; 0000 010B }
0001d9 940e 027c 	CALL __LOADLOCR6
0001db 9666      	ADIW R28,22
0001dc 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:46 WORDS
                 SUBOPT_0x0:
0001dd bbe8      	OUT  0x18,R30
                +
0001de ef88     +LDI R24 , LOW ( 9464 )
0001df e294     +LDI R25 , HIGH ( 9464 )
                +__DELAY_USW_LOOP :
0001e0 9701     +SBIW R24 , 1
0001e1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 9464
                +
0001e2 ef8f     +LDI R24 , LOW ( 65535 )
0001e3 ef9f     +LDI R25 , HIGH ( 65535 )
                +__DELAY_USW_LOOP :
0001e4 9701     +SBIW R24 , 1
0001e5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 65535
0001e6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1:
0001e7 bbe5      	OUT  0x15,R30
0001e8 01d8      	MOVW R26,R16
0001e9 940c 0234 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
0001eb e0aa      	LDI  R26,LOW(10)
0001ec e0b0      	LDI  R27,HIGH(10)
0001ed 940e 024a 	CALL __MULW12
0001ef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
0001f0 eee8      	LDI  R30,LOW(1000)
0001f1 e0f3      	LDI  R31,HIGH(1000)
0001f2 940e 0262 	CALL __DIVW21
0001f4 018f      	MOVW R16,R30
0001f5 eea8      	LDI  R26,LOW(1000)
0001f6 e0b3      	LDI  R27,HIGH(1000)
0001f7 940e 024a 	CALL __MULW12
0001f9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
0001fa 85aa      	LDD  R26,Y+10
0001fb 85bb      	LDD  R27,Y+10+1
0001fc 1bae      	SUB  R26,R30
0001fd 0bbf      	SBC  R27,R31
0001fe 87aa      	STD  Y+10,R26
0001ff 87bb      	STD  Y+10+1,R27
000200 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x5:
000201 e0a0      	LDI  R26,LOW(0)
000202 e0b0      	LDI  R27,0
000203 df03      	RCALL _SevenSegShowNumber
000204 e0a5      	LDI  R26,LOW(5)
000205 e0b0      	LDI  R27,0
000206 940e 0234 	CALL _delay_ms
000208 85aa      	LDD  R26,Y+10
000209 85bb      	LDD  R27,Y+10+1
00020a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6:
00020b e6e4      	LDI  R30,LOW(100)
00020c e0f0      	LDI  R31,HIGH(100)
00020d 940e 0262 	CALL __DIVW21
00020f 019f      	MOVW R18,R30
000210 e6a4      	LDI  R26,LOW(100)
000211 e0b0      	LDI  R27,HIGH(100)
000212 940e 024a 	CALL __MULW12
000214 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
000215 e0ea      	LDI  R30,LOW(10)
000216 e0f0      	LDI  R31,HIGH(10)
000217 940e 0262 	CALL __DIVW21
000219 01af      	MOVW R20,R30
00021a cfd0      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
00021b e0b0      	LDI  R27,0
00021c deea      	RCALL _SevenSegShowNumber
00021d e0a5      	LDI  R26,LOW(5)
00021e e0b0      	LDI  R27,0
00021f 940c 0234 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x9:
000221 89aa      	LDD  R26,Y+18
000222 89bb      	LDD  R27,Y+18+1
000223 1bae      	SUB  R26,R30
000224 0bbf      	SBC  R27,R31
000225 8baa      	STD  Y+18,R26
000226 8bbb      	STD  Y+18+1,R27
000227 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
000228 e0e0      	LDI  R30,LOW(0)
000229 e0f0      	LDI  R31,HIGH(0)
00022a 93fa      	ST   -Y,R31
00022b 93ea      	ST   -Y,R30
00022c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
00022d e0a5      	LDI  R26,LOW(5)
00022e e0b0      	LDI  R27,0
00022f 940e 0234 	CALL _delay_ms
000231 89aa      	LDD  R26,Y+18
000232 89bb      	LDD  R27,Y+18+1
000233 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000234 9610      	adiw r26,0
000235 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000236 ed80     +LDI R24 , LOW ( 0x7D0 )
000237 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000238 9701     +SBIW R24 , 1
000239 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00023a 95a8      	wdr
00023b 9711      	sbiw r26,1
00023c f7c9      	brne __delay_ms0
                 __delay_ms1:
00023d 9508      	ret
                 
                 __ANEGW1:
00023e 95f1      	NEG  R31
00023f 95e1      	NEG  R30
000240 40f0      	SBCI R31,0
000241 9508      	RET
                 
                 __MULW12U:
000242 9ffa      	MUL  R31,R26
000243 2df0      	MOV  R31,R0
000244 9feb      	MUL  R30,R27
000245 0df0      	ADD  R31,R0
000246 9fea      	MUL  R30,R26
000247 2de0      	MOV  R30,R0
000248 0df1      	ADD  R31,R1
000249 9508      	RET
                 
                 __MULW12:
00024a d01c      	RCALL __CHKSIGNW
00024b dff6      	RCALL __MULW12U
00024c f40e      	BRTC __MULW121
00024d dff0      	RCALL __ANEGW1
                 __MULW121:
00024e 9508      	RET
                 
                 __DIVW21U:
00024f 2400      	CLR  R0
000250 2411      	CLR  R1
000251 e190      	LDI  R25,16
                 __DIVW21U1:
000252 0faa      	LSL  R26
000253 1fbb      	ROL  R27
000254 1c00      	ROL  R0
000255 1c11      	ROL  R1
000256 1a0e      	SUB  R0,R30
000257 0a1f      	SBC  R1,R31
000258 f418      	BRCC __DIVW21U2
000259 0e0e      	ADD  R0,R30
00025a 1e1f      	ADC  R1,R31
00025b c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00025c 60a1      	SBR  R26,1
                 __DIVW21U3:
00025d 959a      	DEC  R25
00025e f799      	BRNE __DIVW21U1
00025f 01fd      	MOVW R30,R26
000260 01d0      	MOVW R26,R0
000261 9508      	RET
                 
                 __DIVW21:
000262 d004      	RCALL __CHKSIGNW
000263 dfeb      	RCALL __DIVW21U
000264 f40e      	BRTC __DIVW211
000265 dfd8      	RCALL __ANEGW1
                 __DIVW211:
000266 9508      	RET
                 
                 __CHKSIGNW:
000267 94e8      	CLT
000268 fff7      	SBRS R31,7
000269 c002      	RJMP __CHKSW1
00026a dfd3      	RCALL __ANEGW1
00026b 9468      	SET
                 __CHKSW1:
00026c ffb7      	SBRS R27,7
00026d c006      	RJMP __CHKSW2
00026e 95a0      	COM  R26
00026f 95b0      	COM  R27
000270 9611      	ADIW R26,1
000271 f800      	BLD  R0,0
000272 9403      	INC  R0
000273 fa00      	BST  R0,0
                 __CHKSW2:
000274 9508      	RET
                 
                 __SAVELOCR6:
000275 935a      	ST   -Y,R21
                 __SAVELOCR5:
000276 934a      	ST   -Y,R20
                 __SAVELOCR4:
000277 933a      	ST   -Y,R19
                 __SAVELOCR3:
000278 932a      	ST   -Y,R18
                 __SAVELOCR2:
000279 931a      	ST   -Y,R17
00027a 930a      	ST   -Y,R16
00027b 9508      	RET
                 
                 __LOADLOCR6:
00027c 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00027d 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00027e 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00027f 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000280 8119      	LDD  R17,Y+1
000281 8108      	LD   R16,Y
000282 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  17 r1 :   6 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  26 r17:  24 r18:   5 r19:   4 r20:   5 r21:   4 r22:   2 r23:   0 
r24:  13 r25:   7 r26:  49 r27:  36 r28:   6 r29:   1 r30: 176 r31:  68 
x  :   3 y  : 130 z  :   7 
Registers used: 20 out of 35 (57.1%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   3 
adiw  :   9 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   3 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   1 brmi  :   0 brne  :  23 brpl  :   0 brsh  :   0 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  16 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   4 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   8 cpc   :   9 cpi   :   5 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   5 inc   :   1 jmp   :  24 ld    :   3 ldd   :  55 ldi   : 142 
lds   :   0 lpm   :   7 lsl   :   1 lsr   :   0 mov   :   3 movw  :   9 
mul   :   3 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   0 out   :  25 pop   :   0 push  :   0 rcall :  61 ret   :  24 
reti  :   0 rjmp  :  29 rol   :   3 ror   :   0 sbc   :   3 sbci  :   2 
sbi   :   1 sbic  :   4 sbis  :   0 sbiw  :  14 sbr   :   1 sbrc  :   0 
sbrs  :   2 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  35 std   :  40 sts   :   0 sub   :   3 subi  :   1 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 51 out of 116 (44.0%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000506   1282      4   1286   16384   7.8%
[.dseg] 0x000060 0x000160      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
