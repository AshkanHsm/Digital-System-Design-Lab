;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 10/29/2022
;Author  : Ashkan Hashemi
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;
;#include <HeaderFiles.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Declare your global variables here
;
;int M_Sec=0;
;int Sec=0;    // 1 Sec ==1000 M_Sec
;int Minute=0; //1 Minute==60Sec
;int Hour=0; // 1 Houre=60 minute
;//----------
;//chronometer
;char pause=1;

	.DSEG
;char reset=0;
;char start=0;
;//Car
;int FreeParkingLot=5;
;//Q3
;char Freq=1;
;
;
;
;
;//===========================
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0031 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0032 // Place your code here
; 0000 0033   CarIntruptCheck();
;PCODE: $0000000F VOL: 0
; 0000 0034 }
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0038 {
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0039 // Place your code here
; 0000 003A chronometerkeycheck_INT1();
;PCODE: $00000015 VOL: 0
; 0000 003B }
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;
;// External Interrupt 2 service routine
;interrupt [EXT_INT2] void ext_int2_isr(void)
; 0000 003F {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0040 // Place your code here
; 0000 0041     FrequencySelect_INT2()  ;
;PCODE: $0000001B VOL: 0
; 0000 0042 
; 0000 0043 }
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0047 {
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0048 // Reinitialize Timer 0 value
; 0000 0049 TCNT0=0xB0;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 004A // Place your code here
; 0000 004B chronometer_INT();
;PCODE: $00000023 VOL: 0
; 0000 004C }
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;
;void main(void)
; 0000 004F {
;PCODE: $00000027 VOL: 0
; 0000 0050 // Declare your local variables here
; 0000 0051 
; 0000 0052 // Input/Output Ports initialization
; 0000 0053 // Port A initialization
; 0000 0054 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0055 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0056 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0057 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0058 
; 0000 0059 // Port B initialization
; 0000 005A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 005B DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 005C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 005D PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 005E 
; 0000 005F // Port C initialization
; 0000 0060 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0061 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0062 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0063 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0064 
; 0000 0065 // Port D initialization
; 0000 0066 // Function: Bit7=In Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0067 DDRD=(0<<DDD7) | (0<<DDD6) | (1<<DDD5) | (1<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0068 // State: Bit7=T Bit6=T Bit5=0 Bit4=0 Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0069 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 006A 
; 0000 006B // Timer/Counter 0 initialization
; 0000 006C // Clock source: System Clock
; 0000 006D // Clock value: 7.813 kHz
; 0000 006E // Mode: Normal top=0xFF
; 0000 006F // OC0 output: Disconnected
; 0000 0070 // Timer Period: 9.984 ms
; 0000 0071 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0072 TCNT0=0xB2;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0073 OCR0=0x00;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0074 
; 0000 0075 // Timer/Counter 1 initialization
; 0000 0076 // Clock source: System Clock
; 0000 0077 // Clock value: 1000.000 kHz
; 0000 0078 // Mode: Fast PWM top=0x03FF
; 0000 0079 // OC1A output: Non-Inverted PWM
; 0000 007A // OC1B output: Inverted PWM
; 0000 007B // Noise Canceler: Off
; 0000 007C // Input Capture on Falling Edge
; 0000 007D // Timer Period: 1.024 ms
; 0000 007E // Output Pulse(s):
; 0000 007F // OC1A Period: 1.024 ms Width: 0.25625 ms// OC1B Period: 1.024 ms Width: 0.76775 ms
; 0000 0080 // Timer1 Overflow Interrupt: Off
; 0000 0081 // Input Capture Interrupt: Off
; 0000 0082 // Compare A Match Interrupt: Off
; 0000 0083 // Compare B Match Interrupt: Off
; 0000 0084 TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (1<<COM1B0) | (1<<WGM11) | (1<<WGM10);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0085 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0086 TCNT1H=0xD8;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0087 TCNT1L=0xF0;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0088 ICR1H=0x27;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0089 ICR1L=0x0F;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 008A OCR1AH=0x01;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 008B OCR1AL=0x00;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 008C OCR1BH=0x01;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 008D OCR1BL=0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 008E 
; 0000 008F // Timer/Counter 2 initialization
; 0000 0090 // Clock source: System Clock
; 0000 0091 // Clock value: Timer2 Stopped
; 0000 0092 // Mode: Normal top=0xFF
; 0000 0093 // OC2 output: Disconnected
; 0000 0094 ASSR=0<<AS2;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0095 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0096 TCNT2=0xB2;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0097 OCR2=0x00;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0098 
; 0000 0099 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 009A TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 009B 
; 0000 009C // External Interrupt(s) initialization
; 0000 009D // INT0: On
; 0000 009E // INT0 Mode: Falling Edge
; 0000 009F // INT1: On
; 0000 00A0 // INT1 Mode: Falling Edge
; 0000 00A1 // INT2: On
; 0000 00A2 // INT2 Mode: Falling Edge
; 0000 00A3 GICR|=(1<<INT1) | (1<<INT0) | (1<<INT2);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 00A4 MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 00A5 MCUCSR=(0<<ISC2);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 00A6 GIFR=(1<<INTF1) | (1<<INTF0) | (1<<INTF2);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 00A7 
; 0000 00A8 // USART initialization
; 0000 00A9 // USART disabled
; 0000 00AA UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 00AB 
; 0000 00AC // Analog Comparator initialization
; 0000 00AD // Analog Comparator: Off
; 0000 00AE // The Analog Comparator's positive input is
; 0000 00AF // connected to the AIN0 pin
; 0000 00B0 // The Analog Comparator's negative input is
; 0000 00B1 // connected to the AIN1 pin
; 0000 00B2 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00B3 SFIOR=(0<<ACME);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 00B4 
; 0000 00B5 // ADC initialization
; 0000 00B6 // ADC disabled
; 0000 00B7 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 00B8 
; 0000 00B9 // SPI initialization
; 0000 00BA // SPI disabled
; 0000 00BB SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 00BC 
; 0000 00BD // TWI initialization
; 0000 00BE // TWI disabled
; 0000 00BF TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 00C0 
; 0000 00C1 // Alphanumeric LCD initialization
; 0000 00C2 // Connections are specified in the
; 0000 00C3 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00C4 // RS - PORTC Bit 0
; 0000 00C5 // RD - PORTC Bit 1
; 0000 00C6 // EN - PORTC Bit 2
; 0000 00C7 // D4 - PORTC Bit 4
; 0000 00C8 // D5 - PORTC Bit 5
; 0000 00C9 // D6 - PORTC Bit 6
; 0000 00CA // D7 - PORTC Bit 7
; 0000 00CB // Characters/line: 16
; 0000 00CC lcd_init(16);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00CD 
; 0000 00CE // Global enable interrupts
; 0000 00CF #asm("sei")
;PCODE: $00000073 VOL: 0
	sei
;PCODE: $00000074 VOL: 0
; 0000 00D0 
; 0000 00D1 //port setting:
; 0000 00D2 DDRB.4=0;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00D3 DDRB.5=0;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00D4 ParkingSpaceShow_LCD()  ;
;PCODE: $00000079 VOL: 0
; 0000 00D5 
; 0000 00D6 TurnOFF_AllTimers();
;PCODE: $0000007A VOL: 0
; 0000 00D7 while (1)
;PCODE: $0000007B VOL: 0
; 0000 00D8       {
; 0000 00D9       // Place your code here
; 0000 00DA 
; 0000 00DB       }
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00DC }
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
